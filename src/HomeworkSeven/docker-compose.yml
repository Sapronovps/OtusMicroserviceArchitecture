version: "3.3"
services:
#  zookeeper:
#    container_name: zookeeper
#    image: wurstmeister/zookeeper
#    networks:
#      - otus-network
#    ports:
#      - 2181:2181
#  kafka:
#    container_name: kafka
#    image: wurstmeister/kafka
#    ports:
#      - 9092:9092
#    environment:
#      KAFKA_ADVERTISED_HOST_NAME: kafka
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    networks:
#      - otus-network
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    depends_on:
#      - zookeeper
#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    container_name: kafka-ui
#    ports:
#      - "8083:8080"
#    restart: always
#    networks:
#      - otus-network
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
#      - KAFKA_CLUSTERS_0_READONLY=false

  order-app:
    #        image: sapronovps/otus-microservice-architecture:order
    build:
      context: 'OrderService/order-app'
      args:
        uid: ${UID}
    container_name: order-app
    ports:
      - 8080:80
    networks:
      - otus-network
#    volumes:
#      - ./OrderService/order-app/:/var/www/html
  order-postgres:
    image: postgres:15-alpine
    container_name: order-postgres
    environment:
      POSTGRES_DB: 'order'
      POSTGRES_USER: 'order'
      POSTGRES_PASSWORD: 'order123'
      PGDATA: "/var/lib/postgresql/data/pgdata"
    networks:
      - otus-network
    volumes:
      - orderdb-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"


#  billing-app:
#    #        image: sapronovps/otus-microservice-architecture:billing
#    build:
#      context: 'BillingService/billing-app'
#      args:
#        uid: ${UID}
#    container_name: billing-app
#    ports:
#      - 8081:80
#    networks:
#      - otus-network
##    volumes:
##      - ./BillingService/billing-app/:/var/www/html
#  billing-postgres:
#      image: postgres:15-alpine
#      container_name: billing-postgres
#      environment:
#        POSTGRES_DB: 'billing'
#        POSTGRES_USER: 'billing'
#        POSTGRES_PASSWORD: 'billing123'
#        PGDATA: "/var/lib/postgresql/data/pgdata"
#      networks:
#        - otus-network
#      volumes:
#        - billingdb-data:/var/lib/postgresql/data
#      ports:
#        - "15432:5432"
#
#  notification-app:
#    #        image: sapronovps/otus-microservice-architecture:notification
#    build:
#      context: 'NotificationService/notification-app'
#      args:
#        uid: ${UID}
#    container_name: notification-app
#    ports:
#      - 8082:80
#    networks:
#      - otus-network
##    volumes:
##      - ./NotificationService/notification-app:/var/www/html
#  notification-postgres:
#      container_name: notification-postgres
#      image: postgres:15-alpine
#      environment:
#        POSTGRES_DB: 'notification'
#        POSTGRES_USER: 'notification'
#        POSTGRES_PASSWORD: 'notification123'
#        PGDATA: "/var/lib/postgresql/data/pgdata"
#      networks:
#        - otus-network
#      volumes:
#        - notificationdb-data:/var/lib/postgresql/data
#      ports:
#        - "5433:5432"

networks:
  otus-network:
    driver: bridge

volumes:
  orderdb-data:
  billingdb-data:
  notificationdb-data:
